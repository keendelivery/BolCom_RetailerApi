<?php

// phpcs:ignoreFile
// this file is auto-generated by prolic/fpp
// don't edit this file manually

declare(strict_types=1);

namespace BolCom\RetailerApi\Model\Commission\Query;

final class GetCommission extends \Prooph\Common\Messaging\Query
{
    use \Prooph\Common\Messaging\PayloadTrait;

    public const MESSAGE_NAME = 'BolCom\RetailerApi\Model\Commission\Query\GetCommission';

    protected $messageName = self::MESSAGE_NAME;

    public function ean(): \BolCom\RetailerApi\Model\Offer\Ean
    {
        return \BolCom\RetailerApi\Model\Offer\Ean::fromString($this->payload['ean']);
    }

    public function condition(): ?\BolCom\RetailerApi\Model\Offer\Condition
    {
        return isset($this->payload['condition']) ? \BolCom\RetailerApi\Model\Offer\Condition::fromValue($this->payload['condition']) : null;
    }

    public function price(): ?\BolCom\RetailerApi\Model\CurrencyAmount
    {
        return isset($this->payload['price']) ? \BolCom\RetailerApi\Model\CurrencyAmount::fromScalar($this->payload['price']) : null;
    }

    public static function with(\BolCom\RetailerApi\Model\Offer\Ean $ean, ?\BolCom\RetailerApi\Model\Offer\Condition $condition, ?\BolCom\RetailerApi\Model\CurrencyAmount $price): GetCommission
    {
        return new self([
            'ean' => $ean->toString(),
            'condition' => null === $condition ? null : $condition->value(),
            'price' => null === $price ? null : $price->toScalar(),
        ]);
    }

    protected function setPayload(array $payload): void
    {
        if (! isset($payload['ean']) || ! \is_string($payload['ean'])) {
            throw new \InvalidArgumentException("Key 'ean' is missing in payload or is not a string");
        }

        if (isset($payload['condition']) && ! \is_string($payload['condition'])) {
            throw new \InvalidArgumentException("Value for 'condition' is not a string in payload");
        }

        if (isset($payload['price']) && ! \is_float($payload['price']) && ! \is_int($payload['price'])) {
            throw new \InvalidArgumentException("Value for 'price' is not a float in payload");
        }

        $this->payload = $payload;
    }
}

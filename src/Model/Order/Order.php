<?php

// phpcs:ignoreFile
// this file is auto-generated by prolic/fpp
// don't edit this file manually

declare(strict_types=1);

namespace BolCom\RetailerApi\Model\Order;

final class Order
{
    private $orderId;
    private $dateTimeOrderPlaced;
    private $customerDetails;
    private $orderItems;

    /**
     * @param \BolCom\RetailerApi\Model\Order\OrderId $orderId
     * @param \BolCom\RetailerApi\Model\DateTime $dateTimeOrderPlaced
     * @param \BolCom\RetailerApi\Model\Order\OrderCustomerDetails $customerDetails
     * @param \BolCom\RetailerApi\Model\Order\OrderItem[] $orderItems
     */
    public function __construct(OrderId $orderId, \BolCom\RetailerApi\Model\DateTime $dateTimeOrderPlaced, OrderCustomerDetails $customerDetails, array $orderItems)
    {
        $this->orderId = $orderId;
        $this->dateTimeOrderPlaced = $dateTimeOrderPlaced;
        $this->customerDetails = $customerDetails;
            $this->orderItems = [];
            foreach ($orderItems as $__value) {
                if (! $__value instanceof \BolCom\RetailerApi\Model\Order\OrderItem) {
                    throw new \InvalidArgumentException('orderItems expected an array of BolCom\RetailerApi\Model\Order\OrderItem');
                }
                $this->orderItems[] = $__value;
            }
    }

    public function orderId(): OrderId
    {
        return $this->orderId;
    }

    public function dateTimeOrderPlaced(): \BolCom\RetailerApi\Model\DateTime
    {
        return $this->dateTimeOrderPlaced;
    }

    public function customerDetails(): OrderCustomerDetails
    {
        return $this->customerDetails;
    }

    /**
     * @return \BolCom\RetailerApi\Model\Order\OrderItem[]
     */
    public function orderItems(): array
    {
        return $this->orderItems;
    }

    public function withOrderId(OrderId $orderId): Order
    {
        return new self($orderId, $this->dateTimeOrderPlaced, $this->customerDetails, $this->orderItems);
    }

    public function withDateTimeOrderPlaced(\BolCom\RetailerApi\Model\DateTime $dateTimeOrderPlaced): Order
    {
        return new self($this->orderId, $dateTimeOrderPlaced, $this->customerDetails, $this->orderItems);
    }

    public function withCustomerDetails(OrderCustomerDetails $customerDetails): Order
    {
        return new self($this->orderId, $this->dateTimeOrderPlaced, $customerDetails, $this->orderItems);
    }

    /**
     * @param \BolCom\RetailerApi\Model\Order\OrderItem[] $orderItems
     * @return \BolCom\RetailerApi\Model\Order\Order
     */
    public function withOrderItems(array $orderItems): Order
    {
        return new self($this->orderId, $this->dateTimeOrderPlaced, $this->customerDetails, $orderItems);
    }

    public static function fromArray(array $data): Order
    {
        if (! isset($data['orderId']) || ! \is_string($data['orderId'])) {
            throw new \InvalidArgumentException("Key 'orderId' is missing in data array or is not a string");
        }

        $orderId = OrderId::fromString($data['orderId']);

        if (! isset($data['dateTimeOrderPlaced']) || ! \is_string($data['dateTimeOrderPlaced'])) {
            throw new \InvalidArgumentException("Key 'dateTimeOrderPlaced' is missing in data array or is not a string");
        }

        $dateTimeOrderPlaced = \BolCom\RetailerApi\Model\DateTime::fromString($data['dateTimeOrderPlaced']);

        if (! isset($data['customerDetails']) || ! \is_array($data['customerDetails'])) {
            throw new \InvalidArgumentException("Key 'customerDetails' is missing in data array or is not an array");
        }

        $customerDetails = OrderCustomerDetails::fromArray($data['customerDetails']);

        if (! isset($data['orderItems']) || ! \is_array($data['orderItems'])) {
            throw new \InvalidArgumentException("Key 'orderItems' is missing in data array or is not an array");
        }

        $orderItems = [];

        foreach ($data['orderItems'] as $__value) {
            if (! \is_array($data['orderItems'])) {
                throw new \InvalidArgumentException("Key 'orderItems' in data array or is not an array of arrays");
            }

            $orderItems[] = OrderItem::fromArray($__value);
        }

        return new self(
            $orderId,
            $dateTimeOrderPlaced,
            $customerDetails,
            $orderItems
        );
    }
}

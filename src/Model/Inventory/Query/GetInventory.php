<?php

// phpcs:ignoreFile
// this file is auto-generated by prolic/fpp
// don't edit this file manually

declare(strict_types=1);

namespace BolCom\RetailerApi\Model\Inventory\Query;

final class GetInventory extends \Prooph\Common\Messaging\Query
{
    use \Prooph\Common\Messaging\PayloadTrait;

    public const MESSAGE_NAME = 'BolCom\RetailerApi\Model\Inventory\Query\GetInventory';

    protected $messageName = self::MESSAGE_NAME;

    public function page(): ?int
    {
        return $this->payload['page'] ?? null;
    }

    public function query(): ?string
    {
        return $this->payload['query'] ?? null;
    }

    public function stock(): ?\BolCom\RetailerApi\Model\Inventory\Stock
    {
        return isset($this->payload['stock']) ? \BolCom\RetailerApi\Model\Inventory\Stock::fromValue($this->payload['stock']) : null;
    }

    public function state(): ?\BolCom\RetailerApi\Model\Inventory\State
    {
        return isset($this->payload['state']) ? \BolCom\RetailerApi\Model\Inventory\State::fromValue($this->payload['state']) : null;
    }

    /**
     * @return string[]|null
     */
    public function quantity(): ?array
    {
        return $this->payload['quantity'] ?? null;
    }

        /**
     * @param int $page
     * @param string $query
     * @param \BolCom\RetailerApi\Model\Inventory\Stock $stock
     * @param \BolCom\RetailerApi\Model\Inventory\State $state
     * @param string[]|null $quantity
     */
public static function with(?int $page, ?string $query, ?\BolCom\RetailerApi\Model\Inventory\Stock $stock, ?\BolCom\RetailerApi\Model\Inventory\State $state, ?array $quantity): GetInventory
    {
        return new self([
            'page' => $page,
            'query' => $query,
            'stock' => null === $stock ? null : $stock->value(),
            'state' => null === $state ? null : $state->value(),
            'quantity' => $quantity,
        ]);
    }

    protected function setPayload(array $payload): void
    {
        if (isset($payload['page']) && ! \is_int($payload['page'])) {
            throw new \InvalidArgumentException("Value for 'page' is not a int in payload");
        }

        if (isset($payload['query']) && ! \is_string($payload['query'])) {
            throw new \InvalidArgumentException("Value for 'query' is not a string in payload");
        }

        if (isset($payload['stock']) && ! \is_string($payload['stock'])) {
            throw new \InvalidArgumentException("Value for 'stock' is not a string in payload");
        }

        if (isset($payload['state']) && ! \is_string($payload['state'])) {
            throw new \InvalidArgumentException("Value for 'state' is not a string in payload");
        }

        if (isset($payload['quantity'])) {
            if (! \is_array($payload['quantity'])) {
                throw new \InvalidArgumentException("Value for 'quantity' must be an array in payload");
            }

            foreach ($payload['quantity'] as $__value) {
                if (! \is_string($__value)) {
                    throw new \InvalidArgumentException("Value for 'quantity' is not an array of string in payload");
                }
            }
        }

        $this->payload = $payload;
    }
}

<?php

// phpcs:ignoreFile
// this file is auto-generated by prolic/fpp
// don't edit this file manually

declare(strict_types=1);

namespace BolCom\RetailerApi\Model\ProcessStatus;

final class ProcessStatus
{
    private $id;
    private $entityId;
    private $eventType;
    private $description;
    private $status;
    private $errorMessage;
    private $createTimestamp;

    public function __construct(int $id, ?EntityId $entityId, EventType $eventType, string $description, EventStatus $status, ?string $errorMessage, \BolCom\RetailerApi\Model\DateTime $createTimestamp)
    {
        $this->id = $id;
        $this->entityId = $entityId;
        $this->eventType = $eventType;
        $this->description = $description;
        $this->status = $status;
        $this->errorMessage = $errorMessage;
        $this->createTimestamp = $createTimestamp;
    }

    public function id(): int
    {
        return $this->id;
    }

    public function entityId(): ?EntityId
    {
        return $this->entityId;
    }

    public function eventType(): EventType
    {
        return $this->eventType;
    }

    public function description(): string
    {
        return $this->description;
    }

    public function status(): EventStatus
    {
        return $this->status;
    }

    public function errorMessage(): ?string
    {
        return $this->errorMessage;
    }

    public function createTimestamp(): \BolCom\RetailerApi\Model\DateTime
    {
        return $this->createTimestamp;
    }

    public function withId(int $id): ProcessStatus
    {
        return new self($id, $this->entityId, $this->eventType, $this->description, $this->status, $this->errorMessage, $this->createTimestamp);
    }

    public function withEntityId(?EntityId $entityId): ProcessStatus
    {
        return new self($this->id, $entityId, $this->eventType, $this->description, $this->status, $this->errorMessage, $this->createTimestamp);
    }

    public function withEventType(EventType $eventType): ProcessStatus
    {
        return new self($this->id, $this->entityId, $eventType, $this->description, $this->status, $this->errorMessage, $this->createTimestamp);
    }

    public function withDescription(string $description): ProcessStatus
    {
        return new self($this->id, $this->entityId, $this->eventType, $description, $this->status, $this->errorMessage, $this->createTimestamp);
    }

    public function withStatus(EventStatus $status): ProcessStatus
    {
        return new self($this->id, $this->entityId, $this->eventType, $this->description, $status, $this->errorMessage, $this->createTimestamp);
    }

    public function withErrorMessage(?string $errorMessage): ProcessStatus
    {
        return new self($this->id, $this->entityId, $this->eventType, $this->description, $this->status, $errorMessage, $this->createTimestamp);
    }

    public function withCreateTimestamp(\BolCom\RetailerApi\Model\DateTime $createTimestamp): ProcessStatus
    {
        return new self($this->id, $this->entityId, $this->eventType, $this->description, $this->status, $this->errorMessage, $createTimestamp);
    }

    public static function fromArray(array $data): ProcessStatus
    {
        if (! isset($data['id']) || ! \is_int($data['id'])) {
            throw new \InvalidArgumentException("Key 'id' is missing in data array or is not a int");
        }

        $id = $data['id'];

        if (isset($data['entityId'])) {
            if (! \is_string($data['entityId'])) {
                throw new \InvalidArgumentException("Value for 'entityId' is not a string in data array");
            }

            $entityId = EntityId::fromString($data['entityId']);
        } else {
            $entityId = null;
        }

        if (! isset($data['eventType']) || ! \is_string($data['eventType'])) {
            throw new \InvalidArgumentException("Key 'eventType' is missing in data array or is not a string");
        }

        $eventType = EventType::fromValue($data['eventType']);

        if (! isset($data['description']) || ! \is_string($data['description'])) {
            throw new \InvalidArgumentException("Key 'description' is missing in data array or is not a string");
        }

        $description = $data['description'];

        if (! isset($data['status']) || ! \is_string($data['status'])) {
            throw new \InvalidArgumentException("Key 'status' is missing in data array or is not a string");
        }

        $status = EventStatus::fromValue($data['status']);

        if (isset($data['errorMessage'])) {
            if (! \is_string($data['errorMessage'])) {
                throw new \InvalidArgumentException("Value for 'errorMessage' is not a string in data array");
            }

            $errorMessage = $data['errorMessage'];
        } else {
            $errorMessage = null;
        }

        if (! isset($data['createTimestamp']) || ! \is_string($data['createTimestamp'])) {
            throw new \InvalidArgumentException("Key 'createTimestamp' is missing in data array or is not a string");
        }

        $createTimestamp = \BolCom\RetailerApi\Model\DateTime::fromString($data['createTimestamp']);

        return new self(
            $id,
            $entityId,
            $eventType,
            $description,
            $status,
            $errorMessage,
            $createTimestamp
        );
    }
}

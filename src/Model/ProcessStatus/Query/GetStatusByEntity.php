<?php

// phpcs:ignoreFile
// this file is auto-generated by prolic/fpp
// don't edit this file manually

declare(strict_types=1);

namespace BolCom\RetailerApi\Model\ProcessStatus\Query;

final class GetStatusByEntity extends \Prooph\Common\Messaging\Query
{
    use \Prooph\Common\Messaging\PayloadTrait;

    public const MESSAGE_NAME = 'BolCom\RetailerApi\Model\ProcessStatus\Query\GetStatusByEntity';

    protected $messageName = self::MESSAGE_NAME;

    public function entityId(): \BolCom\RetailerApi\Model\ProcessStatus\EntityId
    {
        return \BolCom\RetailerApi\Model\ProcessStatus\EntityId::fromString($this->payload['entityId']);
    }

    public function eventType(): \BolCom\RetailerApi\Model\ProcessStatus\EventType
    {
        return \BolCom\RetailerApi\Model\ProcessStatus\EventType::fromValue($this->payload['eventType']);
    }

    public function page(): int
    {
        return $this->payload['page'];
    }

    public static function with(\BolCom\RetailerApi\Model\ProcessStatus\EntityId $entityId, \BolCom\RetailerApi\Model\ProcessStatus\EventType $eventType, int $page): GetStatusByEntity
    {
        return new self([
            'entityId' => $entityId->toString(),
            'eventType' => $eventType->value(),
            'page' => $page,
        ]);
    }

    protected function setPayload(array $payload): void
    {
        if (! isset($payload['entityId']) || ! \is_string($payload['entityId'])) {
            throw new \InvalidArgumentException("Key 'entityId' is missing in payload or is not a string");
        }

        if (! isset($payload['eventType']) || ! \is_string($payload['eventType'])) {
            throw new \InvalidArgumentException("Key 'eventType' is missing in payload or is not a string");
        }

        if (! isset($payload['page']) || ! \is_int($payload['page'])) {
            throw new \InvalidArgumentException("Key 'page' is missing in payload or is not a int");
        }

        $this->payload = $payload;
    }
}

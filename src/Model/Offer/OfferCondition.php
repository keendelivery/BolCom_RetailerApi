<?php

// phpcs:ignoreFile
// this file is auto-generated by prolic/fpp
// don't edit this file manually

declare(strict_types=1);

namespace BolCom\RetailerApi\Model\Offer;

final class OfferCondition
{
    private $name;
    private $category;
    private $comment;

    public function __construct(Condition $name, ?ConditionCategory $category, ?ConditionComment $comment)
    {
        $this->name = $name;
        $this->category = $category;
        $this->comment = $comment;
    }

    public function name(): Condition
    {
        return $this->name;
    }

    public function category(): ?ConditionCategory
    {
        return $this->category;
    }

    public function comment(): ?ConditionComment
    {
        return $this->comment;
    }

    public function withName(Condition $name): OfferCondition
    {
        return new self($name, $this->category, $this->comment);
    }

    public function withCategory(?ConditionCategory $category): OfferCondition
    {
        return new self($this->name, $category, $this->comment);
    }

    public function withComment(?ConditionComment $comment): OfferCondition
    {
        return new self($this->name, $this->category, $comment);
    }

    public static function fromArray(array $data): OfferCondition
    {
        if (! isset($data['name']) || ! \is_string($data['name'])) {
            throw new \InvalidArgumentException("Key 'name' is missing in data array or is not a string");
        }

        $name = Condition::fromValue($data['name']);

        if (isset($data['category'])) {
            if (! \is_string($data['category'])) {
                throw new \InvalidArgumentException("Value for 'category' is not a string in data array");
            }

            $category = ConditionCategory::fromValue($data['category']);
        } else {
            $category = null;
        }

        if (isset($data['comment'])) {
            if (! \is_string($data['comment'])) {
                throw new \InvalidArgumentException("Value for 'comment' is not a string in data array");
            }

            $comment = ConditionComment::fromString($data['comment']);
        } else {
            $comment = null;
        }

        return new self(
            $name,
            $category,
            $comment
        );
    }

    public function toArray(): array
    {
        return [
            'name' => $this->name->value(),
            'category' => null === $this->category ? null : $this->category->value(),
            'comment' => null === $this->comment ? null : null === $this->comment ? null : $this->comment->toString(),
        ];
    }
}

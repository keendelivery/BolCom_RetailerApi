<?php

// phpcs:ignoreFile
// this file is auto-generated by prolic/fpp
// don't edit this file manually

declare(strict_types=1);

namespace BolCom\RetailerApi\Model\Offer;

final class Condition
{
    public const OPTIONS = [
        'IS_NEW' => 'NEW',
        'AS_NEW' => 'AS_NEW',
        'GOOD' => 'GOOD',
        'REASONABLE' => 'REASONABLE',
        'MODERATE' => 'MODERATE',
        'UNKNOWN' => 'UNKNOWN',
    ];

    public const IS_NEW = 'NEW';
    public const AS_NEW = 'AS_NEW';
    public const GOOD = 'GOOD';
    public const REASONABLE = 'REASONABLE';
    public const MODERATE = 'MODERATE';
    public const UNKNOWN = 'UNKNOWN';

    private $name;
    private $value;

    private function __construct(string $name)
    {
        $this->name = $name;
        $this->value = self::OPTIONS[$name];
    }

    public static function IS_NEW(): self
    {
        return new self('IS_NEW');
    }

    public static function AS_NEW(): self
    {
        return new self('AS_NEW');
    }

    public static function GOOD(): self
    {
        return new self('GOOD');
    }

    public static function REASONABLE(): self
    {
        return new self('REASONABLE');
    }

    public static function MODERATE(): self
    {
        return new self('MODERATE');
    }

    public static function UNKNOWN(): self
    {
        return new self('UNKNOWN');
    }

    public static function fromName(string $value): self
    {
        if (! isset(self::OPTIONS[$value])) {
            throw new \InvalidArgumentException('Unknown enum name given');
        }

        return self::{$value}();
    }

    public static function fromValue($value): self
    {
        foreach (self::OPTIONS as $name => $v) {
            if ($v === $value) {
                return self::{$name}();
            }
        }

        throw new \InvalidArgumentException('Unknown enum value given');
    }

    public function equals(Condition $other): bool
    {
        return \get_class($this) === \get_class($other) && $this->name === $other->name;
    }

    public function name(): string
    {
        return $this->name;
    }

    public function value()
    {
        return $this->value;
    }

    public function __toString(): string
    {
        return $this->name;
    }

    public function toString(): string
    {
        return $this->name;
    }
}

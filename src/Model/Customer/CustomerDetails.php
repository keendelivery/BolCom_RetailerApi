<?php

// phpcs:ignoreFile
// this file is auto-generated by prolic/fpp
// don't edit this file manually

declare(strict_types=1);

namespace BolCom\RetailerApi\Model\Customer;

final class CustomerDetails
{
    private $salutationCode;
    private $firstName;
    private $surname;
    private $streetName;
    private $houseNumber;
    private $houseNumberExtended;
    private $addressSupplement;
    private $extraAddressInformation;
    private $zipCode;
    private $city;
    private $countryCode;
    private $email;
    private $company;
    private $vatNumber;
    private $deliveryPhoneNumber;

    public function __construct(string $salutationCode, ?string $firstName, ?string $surname, ?string $streetName, ?string $houseNumber, ?string $houseNumberExtended, ?string $addressSupplement, ?string $extraAddressInformation, string $zipCode, ?string $city, string $countryCode, ?string $email, ?string $company, ?string $vatNumber, ?string $deliveryPhoneNumber)
    {
        $this->salutationCode = $salutationCode;
        $this->firstName = $firstName;
        $this->surname = $surname;
        $this->streetName = $streetName;
        $this->houseNumber = $houseNumber;
        $this->houseNumberExtended = $houseNumberExtended;
        $this->addressSupplement = $addressSupplement;
        $this->extraAddressInformation = $extraAddressInformation;
        $this->zipCode = $zipCode;
        $this->city = $city;
        $this->countryCode = $countryCode;
        $this->email = $email;
        $this->company = $company;
        $this->vatNumber = $vatNumber;
        $this->deliveryPhoneNumber = $deliveryPhoneNumber;
    }

    public function salutationCode(): string
    {
        return $this->salutationCode;
    }

    public function firstName(): ?string
    {
        return $this->firstName;
    }

    public function surname(): ?string
    {
        return $this->surname;
    }

    public function streetName(): ?string
    {
        return $this->streetName;
    }

    public function houseNumber(): ?string
    {
        return $this->houseNumber;
    }

    public function houseNumberExtended(): ?string
    {
        return $this->houseNumberExtended;
    }

    public function addressSupplement(): ?string
    {
        return $this->addressSupplement;
    }

    public function extraAddressInformation(): ?string
    {
        return $this->extraAddressInformation;
    }

    public function zipCode(): string
    {
        return $this->zipCode;
    }

    public function city(): ?string
    {
        return $this->city;
    }

    public function countryCode(): string
    {
        return $this->countryCode;
    }

    public function email(): ?string
    {
        return $this->email;
    }

    public function company(): ?string
    {
        return $this->company;
    }

    public function vatNumber(): ?string
    {
        return $this->vatNumber;
    }

    public function deliveryPhoneNumber(): ?string
    {
        return $this->deliveryPhoneNumber;
    }

    public function withSalutationCode(string $salutationCode): CustomerDetails
    {
        return new self($salutationCode, $this->firstName, $this->surname, $this->streetName, $this->houseNumber, $this->houseNumberExtended, $this->addressSupplement, $this->extraAddressInformation, $this->zipCode, $this->city, $this->countryCode, $this->email, $this->company, $this->vatNumber, $this->deliveryPhoneNumber);
    }

    public function withFirstName(?string $firstName): CustomerDetails
    {
        return new self($this->salutationCode, $firstName, $this->surname, $this->streetName, $this->houseNumber, $this->houseNumberExtended, $this->addressSupplement, $this->extraAddressInformation, $this->zipCode, $this->city, $this->countryCode, $this->email, $this->company, $this->vatNumber, $this->deliveryPhoneNumber);
    }

    public function withSurname(?string $surname): CustomerDetails
    {
        return new self($this->salutationCode, $this->firstName, $surname, $this->streetName, $this->houseNumber, $this->houseNumberExtended, $this->addressSupplement, $this->extraAddressInformation, $this->zipCode, $this->city, $this->countryCode, $this->email, $this->company, $this->vatNumber, $this->deliveryPhoneNumber);
    }

    public function withStreetName(?string $streetName): CustomerDetails
    {
        return new self($this->salutationCode, $this->firstName, $this->surname, $streetName, $this->houseNumber, $this->houseNumberExtended, $this->addressSupplement, $this->extraAddressInformation, $this->zipCode, $this->city, $this->countryCode, $this->email, $this->company, $this->vatNumber, $this->deliveryPhoneNumber);
    }

    public function withHouseNumber(?string $houseNumber): CustomerDetails
    {
        return new self($this->salutationCode, $this->firstName, $this->surname, $this->streetName, $houseNumber, $this->houseNumberExtended, $this->addressSupplement, $this->extraAddressInformation, $this->zipCode, $this->city, $this->countryCode, $this->email, $this->company, $this->vatNumber, $this->deliveryPhoneNumber);
    }

    public function withHouseNumberExtended(?string $houseNumberExtended): CustomerDetails
    {
        return new self($this->salutationCode, $this->firstName, $this->surname, $this->streetName, $this->houseNumber, $houseNumberExtended, $this->addressSupplement, $this->extraAddressInformation, $this->zipCode, $this->city, $this->countryCode, $this->email, $this->company, $this->vatNumber, $this->deliveryPhoneNumber);
    }

    public function withAddressSupplement(?string $addressSupplement): CustomerDetails
    {
        return new self($this->salutationCode, $this->firstName, $this->surname, $this->streetName, $this->houseNumber, $this->houseNumberExtended, $addressSupplement, $this->extraAddressInformation, $this->zipCode, $this->city, $this->countryCode, $this->email, $this->company, $this->vatNumber, $this->deliveryPhoneNumber);
    }

    public function withExtraAddressInformation(?string $extraAddressInformation): CustomerDetails
    {
        return new self($this->salutationCode, $this->firstName, $this->surname, $this->streetName, $this->houseNumber, $this->houseNumberExtended, $this->addressSupplement, $extraAddressInformation, $this->zipCode, $this->city, $this->countryCode, $this->email, $this->company, $this->vatNumber, $this->deliveryPhoneNumber);
    }

    public function withZipCode(string $zipCode): CustomerDetails
    {
        return new self($this->salutationCode, $this->firstName, $this->surname, $this->streetName, $this->houseNumber, $this->houseNumberExtended, $this->addressSupplement, $this->extraAddressInformation, $zipCode, $this->city, $this->countryCode, $this->email, $this->company, $this->vatNumber, $this->deliveryPhoneNumber);
    }

    public function withCity(?string $city): CustomerDetails
    {
        return new self($this->salutationCode, $this->firstName, $this->surname, $this->streetName, $this->houseNumber, $this->houseNumberExtended, $this->addressSupplement, $this->extraAddressInformation, $this->zipCode, $city, $this->countryCode, $this->email, $this->company, $this->vatNumber, $this->deliveryPhoneNumber);
    }

    public function withCountryCode(string $countryCode): CustomerDetails
    {
        return new self($this->salutationCode, $this->firstName, $this->surname, $this->streetName, $this->houseNumber, $this->houseNumberExtended, $this->addressSupplement, $this->extraAddressInformation, $this->zipCode, $this->city, $countryCode, $this->email, $this->company, $this->vatNumber, $this->deliveryPhoneNumber);
    }

    public function withEmail(?string $email): CustomerDetails
    {
        return new self($this->salutationCode, $this->firstName, $this->surname, $this->streetName, $this->houseNumber, $this->houseNumberExtended, $this->addressSupplement, $this->extraAddressInformation, $this->zipCode, $this->city, $this->countryCode, $email, $this->company, $this->vatNumber, $this->deliveryPhoneNumber);
    }

    public function withCompany(?string $company): CustomerDetails
    {
        return new self($this->salutationCode, $this->firstName, $this->surname, $this->streetName, $this->houseNumber, $this->houseNumberExtended, $this->addressSupplement, $this->extraAddressInformation, $this->zipCode, $this->city, $this->countryCode, $this->email, $company, $this->vatNumber, $this->deliveryPhoneNumber);
    }

    public function withVatNumber(?string $vatNumber): CustomerDetails
    {
        return new self($this->salutationCode, $this->firstName, $this->surname, $this->streetName, $this->houseNumber, $this->houseNumberExtended, $this->addressSupplement, $this->extraAddressInformation, $this->zipCode, $this->city, $this->countryCode, $this->email, $this->company, $vatNumber, $this->deliveryPhoneNumber);
    }

    public function withDeliveryPhoneNumber(?string $deliveryPhoneNumber): CustomerDetails
    {
        return new self($this->salutationCode, $this->firstName, $this->surname, $this->streetName, $this->houseNumber, $this->houseNumberExtended, $this->addressSupplement, $this->extraAddressInformation, $this->zipCode, $this->city, $this->countryCode, $this->email, $this->company, $this->vatNumber, $deliveryPhoneNumber);
    }

    public static function fromArray(array $data): CustomerDetails
    {
        if (! isset($data['salutationCode']) || ! \is_string($data['salutationCode'])) {
            throw new \InvalidArgumentException("Key 'salutationCode' is missing in data array or is not a string");
        }

        $salutationCode = $data['salutationCode'];

        if (isset($data['firstName'])) {
            if (! \is_string($data['firstName'])) {
                throw new \InvalidArgumentException("Value for 'firstName' is not a string in data array");
            }

            $firstName = $data['firstName'];
        } else {
            $firstName = null;
        }

        if (isset($data['surname'])) {
            if (! \is_string($data['surname'])) {
                throw new \InvalidArgumentException("Value for 'surname' is not a string in data array");
            }

            $surname = $data['surname'];
        } else {
            $surname = null;
        }

        if (isset($data['streetName'])) {
            if (! \is_string($data['streetName'])) {
                throw new \InvalidArgumentException("Value for 'streetName' is not a string in data array");
            }

            $streetName = $data['streetName'];
        } else {
            $streetName = null;
        }

        if (isset($data['houseNumber'])) {
            if (! \is_string($data['houseNumber'])) {
                throw new \InvalidArgumentException("Value for 'houseNumber' is not a string in data array");
            }

            $houseNumber = $data['houseNumber'];
        } else {
            $houseNumber = null;
        }

        if (isset($data['houseNumberExtended'])) {
            if (! \is_string($data['houseNumberExtended'])) {
                throw new \InvalidArgumentException("Value for 'houseNumberExtended' is not a string in data array");
            }

            $houseNumberExtended = $data['houseNumberExtended'];
        } else {
            $houseNumberExtended = null;
        }

        if (isset($data['addressSupplement'])) {
            if (! \is_string($data['addressSupplement'])) {
                throw new \InvalidArgumentException("Value for 'addressSupplement' is not a string in data array");
            }

            $addressSupplement = $data['addressSupplement'];
        } else {
            $addressSupplement = null;
        }

        if (isset($data['extraAddressInformation'])) {
            if (! \is_string($data['extraAddressInformation'])) {
                throw new \InvalidArgumentException("Value for 'extraAddressInformation' is not a string in data array");
            }

            $extraAddressInformation = $data['extraAddressInformation'];
        } else {
            $extraAddressInformation = null;
        }

        if (! isset($data['zipCode']) || ! \is_string($data['zipCode'])) {
            throw new \InvalidArgumentException("Key 'zipCode' is missing in data array or is not a string");
        }

        $zipCode = $data['zipCode'];

        if (isset($data['city'])) {
            if (! \is_string($data['city'])) {
                throw new \InvalidArgumentException("Value for 'city' is not a string in data array");
            }

            $city = $data['city'];
        } else {
            $city = null;
        }

        if (! isset($data['countryCode']) || ! \is_string($data['countryCode'])) {
            throw new \InvalidArgumentException("Key 'countryCode' is missing in data array or is not a string");
        }

        $countryCode = $data['countryCode'];

        if (isset($data['email'])) {
            if (! \is_string($data['email'])) {
                throw new \InvalidArgumentException("Value for 'email' is not a string in data array");
            }

            $email = $data['email'];
        } else {
            $email = null;
        }

        if (isset($data['company'])) {
            if (! \is_string($data['company'])) {
                throw new \InvalidArgumentException("Value for 'company' is not a string in data array");
            }

            $company = $data['company'];
        } else {
            $company = null;
        }

        if (isset($data['vatNumber'])) {
            if (! \is_string($data['vatNumber'])) {
                throw new \InvalidArgumentException("Value for 'vatNumber' is not a string in data array");
            }

            $vatNumber = $data['vatNumber'];
        } else {
            $vatNumber = null;
        }

        if (isset($data['deliveryPhoneNumber'])) {
            if (! \is_string($data['deliveryPhoneNumber'])) {
                throw new \InvalidArgumentException("Value for 'deliveryPhoneNumber' is not a string in data array");
            }

            $deliveryPhoneNumber = $data['deliveryPhoneNumber'];
        } else {
            $deliveryPhoneNumber = null;
        }

        return new self(
            $salutationCode,
            $firstName,
            $surname,
            $streetName,
            $houseNumber,
            $houseNumberExtended,
            $addressSupplement,
            $extraAddressInformation,
            $zipCode,
            $city,
            $countryCode,
            $email,
            $company,
            $vatNumber,
            $deliveryPhoneNumber
        );
    }
}
